package main

import (
	"context"
	"log"

	"github.com/yourname/j_app/auth"
	"github.com/yourname/j_app/db"
	_ "github.com/yourname/j_app/docs" // docs is generated by Swag CLI
	"github.com/yourname/j_app/handlers"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// @title Job Board API
// @version 1.0
// @description This is a sample server for a job board application.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:3000
// @BasePath /
// @schemes http
func main() {
	// Инициализация БД
	if err := db.Init(); err != nil {
		log.Fatal("DB connection failed:", err)
	}
	defer db.Conn.Close(context.Background())

	// Настройка сервера
	r := gin.Default()

	// Роуты
	// Public routes
	// TODO: Implement actual login logic, this is a placeholder
	r.POST("/login", func(c *gin.Context) {
		// In a real app, you'd validate user credentials from c.Request.Body
		// For now, let's assume a successful login for "testuser"
		userID := "123"
		username := "testuser"
		role := "user" // or "admin", "employer", "job_seeker"

		token, err := auth.GenerateToken(userID, username, role)
		if err != nil {
			c.JSON(500, gin.H{"error": "Failed to generate token"})
			return
		}
		c.JSON(200, gin.H{"token": token})
	})

	// Protected routes
	protected := r.Group("/")
	protected.Use(auth.AuthMiddleware()) // Сначала общая аутентификация
	{
		// Пример RBAC:
		// Создание резюме доступно соискателям и администраторам
		protected.POST("/resumes", auth.RoleAuthMiddleware("job_seeker", "admin"), handlers.CreateResume)
		// Просмотр резюме доступен работодателям и администраторам
		protected.GET("/resumes", auth.RoleAuthMiddleware("employer", "admin"), handlers.GetResumes)

		// Эндпоинт для получения резюме текущего пользователя
		protected.GET("/users/me/resumes", auth.RoleAuthMiddleware("job_seeker", "admin"), handlers.GetUserResumes)

		// Эндпоинт для удаления резюме
		protected.DELETE("/resumes/:id", auth.RoleAuthMiddleware("job_seeker", "admin"), handlers.DeleteResume)

		// Эндпоинт для получения объявлений текущего пользователя
		protected.GET("/users/me/jobs", auth.RoleAuthMiddleware("employer", "admin"), handlers.GetUserJobPostings)

		// Эндпоинт для переключения статуса активности объявления
		protected.PUT("/jobs/:id/status", auth.RoleAuthMiddleware("employer", "admin"), handlers.ToggleJobPostingStatus)

		// Эндпоинт для удаления объявления
		protected.DELETE("/jobs/:id", auth.RoleAuthMiddleware("employer", "admin"), handlers.DeleteJobPosting)

		// TODO: Добавить другие защищенные маршруты с соответствующими проверками ролей
		// Например:
		// adminRoutes := protected.Group("/admin")
		// adminRoutes.Use(auth.RoleAuthMiddleware("admin"))
		// {
		//   adminRoutes.GET("/users", handlers.GetUsers)
		// }
	}

	// Swagger UI - should be accessible without auth for discoverability,
	// or protected separately if needed.
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Запуск
	log.Println("Server running on :3000")
	log.Println("Swagger UI available at http://localhost:3000/swagger/index.html")
	r.Run(":3000")
}
